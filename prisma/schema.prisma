generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profile {
  id        String    @id @default(uuid())
  userId    String?   @unique(map: "userID")
  name      String
  imageURL  String?
  email     String
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @db.Timestamptz(6)
  role      Role      @default(SUPERADMIN)
}

model purchase {
  id             String   @id @default(uuid())
  purchaseId     String?
  dateOfPurchase DateTime @default(now()) @db.Timetz(6)
  accountId      String
  purchasedBy    String?
  description    String?
  amount         Int?     @default(0)
}

model categories {
  id      String    @id @default(uuid())
  name    String    @unique(map: "name")
  objects objects[]
}

model objectProperties {
  id           String  @id @default(uuid())
  objectId     String?
  propertyId   String?
  index        Int?
  defaultValue String?
}

model objects {
  id          String      @id @default(uuid())
  categoryId  String
  name        String
  description String
  type        ObjectTypes
  dateCreated DateTime?   @default(now()) @db.Timestamptz(6)
  categories  categories  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  property    property[]
}

model property {
  id             String           @id @default(uuid())
  name           String
  description    String?
  type           PropertyTypes
  objectId       String
  objects        objects          @relation(fields: [objectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  propertyValues propertyValues[]
}

model purchaseRegister {
  id         String @id @default(uuid())
  purchaseId String
  objectId   String
  cost       Int    @default(0)
}

model propertyValues {
  id          String   @id @default(uuid())
  propertyId  String
  name        String
  description String
  index       Int?
  property    property @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  SUPERADMIN
  ADMIN
  MANAGER
  SALESMAN
  USER
}

enum PropertyTypes {
  TEXT
  SELECTSINGLE
  SELECTMULTIPLE
  BOOLEAN
}

enum ObjectTypes {
  FIXED
  VARIANT
}
